datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator e_learning_client {
  provider = "prisma-client-js"
}

enum Status {
  active   @map("active")
  inactive @map("inactive")
}

enum Role_Type {
  teacher @map("teacher")
  admin   @map("admin")
  user    @map("user")
}

enum TranslateType {
  error   @map("error")
  content @map("content")

  @@map("translate_type")
}

model Language {
  id         String       @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  code       String       @map("code") @db.VarChar(2)
  title      String       @map("title") @db.VarChar(64)
  image_url  String       @map("image_url") @db.VarChar()
  definition Definition[]

  @@id([id])
  @@unique([code])
  @@map("language")
}

model Translate {
  id         String        @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  code       String        @map("code") @db.VarChar()
  type       TranslateType @map("type")
  createdAt  DateTime      @default(now()) @map("created_at")
  status     Status        @default(active) @map("status")
  definition Definition[]

  @@id([id])
  @@unique([code])
  @@map("translate")
}

model Definition {
  id          String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  translateId String @map("translate_id") @db.Uuid
  languageId  String @map("language_id") @db.Uuid
  value       String @map("value") @db.VarChar()

  translate Translate @relation(fields: [translateId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  language  Language  @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("definition")
}

model Category {
  id          String  @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name        String  @map("name") @db.Uuid
  image_url   String? @map("image_url") @db.VarChar()
  category_id String? @map("category_id") @db.Uuid

  course Course[]

  subcategories Category[] @relation("SubcategoryToCategory")

  category Category? @relation("SubcategoryToCategory", fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("category")
}

model Course {
  id                  String  @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name                String  @map("name") @db.VarChar()
  description         String  @map("description") @db.VarChar()
  price               Int     @map("price") @db.Integer()
  is_progress_limited Boolean @default(false) @map("is_progress_limited") @db.Boolean()
  category_id         String  @map("category_id") @db.Uuid
  landing_image       String  @map("landing_image") @db.VarChar()
  promo_video_url     String  @map("promo_video_url") @db.VarChar()
  // createdBy           String @map("createdBy") @db.Uuid

  course_intend course_intend[]
  module        Module[]
  enrollment    Enrollment[]
  quiz          Quiz[]

  // user     User     @relation(fields: [createdBy], references: [id])
  category Category? @relation(fields: [category_id], references: [id])

  @@id([id])
  @@map("course")
}

model Quiz {
  id               String  @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name             String  @map("name") @db.VarChar()
  description      String  @map("description") @db.VarChar()
  number           Int     @map("number") @db.Integer()
  course_order     Int     @map("course_order") @db.Integer()
  min_pas_score    Int     @map("min_pas_score") @db.Integer()
  is_pass_required Boolean @default(true) @map("is_pass_required")
  course_id        String  @map("course_id") @db.Uuid

  quiz_question     quiz_question[]
  user_quiz_attempt user_quiz_attempt[]

  course Course @relation(fields: [course_id], references: [id])

  @@id([id])
  @@map("quiz")
}

model Enrollment {
  id                  String    @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  course_id           String    @map("course_id") @db.Uuid
  user_id             String    @map("user_id") @db.Uuid
  enrollment_datetime DateTime  @default(now()) @map("enrollment_datetime")
  completed_time      DateTime? @map("completed_time")

  course Course @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user   User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("enrollment")
}

model quiz_answer {
  id          String  @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  answer_text String  @map("answer_text") @db.VarChar()
  is_correct  Boolean @default(false) @map("is_correct")
  question_id String  @map("question_id") @db.Uuid

  quiz_question quiz_question @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("quiz_answer")
}

model user_quiz_attempt {
  id               String   @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  user_id          String   @map("user_id") @db.Uuid
  quiz_id          String   @map("quiz_id") @db.Uuid
  attempt_datetime DateTime? @default(now()) @map("attempt_datetime")
  score_achieved   Int      @map("score_achieved") @db.Integer

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  quiz Quiz @relation(fields: [quiz_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("user_quiz_attempt")
}

model quiz_question {
  id      String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  title   String @map("title") @db.VarChar()
  quiz_id String @map("quiz_id") @db.Uuid
  ball    Int    @map("ball") @db.Integer()

  quiz_answer quiz_answer[]

  quiz Quiz @relation(fields: [quiz_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("quiz_question")
}

model Lesson {
  id                String  @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name              String  @map("name") @db.VarChar()
  number            Int     @map("number") @db.Integer()
  module_id         String  @map("module_id") @db.Uuid
  lesson_details    String  @map("lesson_details") @db.VarChar()
  course_order      Int     @map("course_order") @db.Integer()
  video_url         String? @map("promo_video_url") @db.VarChar()
  is_preview_lesson Boolean @default(false) @map("is_progress_limited") @db.Boolean()
  user_id           String  @map("user_id") @db.Uuid

  user        User          @relation(fields: [user_id], references: [id])
  module      Module?       @relation(fields: [module_id], references: [id])
  resource    Resource[]
  user_lesson user_lesson[]

  @@id([id])
  @@map("lesson")
}

model course_intend {
  id        String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  title     String @map("title") @db.VarChar()
  course_id String @map("course_id") @db.Uuid

  course Course @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("course_intend")
}

model Module {
  id        String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name      String @map("name") @db.VarChar()
  number    String @map("number") @db.VarChar()
  course_id String @map("course_id") @db.Uuid

  lesson Lesson[]

  course Course @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("module")
}

model Resource {
  id        String  @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  file_url  String? @map("file_url") @db.VarChar()
  title     String  @map("title") @db.VarChar()
  link_url  String? @map("link_url") @db.VarChar
  lesson_id String  @map("lesson_id") @db.Uuid

  lesson Lesson @relation(fields: [lesson_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("resource")
}

model user_lesson {
  id             String   @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  completed_time DateTime? @map("completed_time") @db.Date()
  lesson_id      String   @map("lesson_id") @db.Uuid
  user_id        String   @map("user_id") @db.Uuid

  lesson Lesson @relation(fields: [lesson_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("user_lesson")
}

model User {
  id          String    @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name        String?   @map("name") @db.VarChar()
  description String?   @map("description") @db.VarChar()
  email       String?   @map("email") @db.VarChar()
  phone       String    @map("phone") @db.VarChar()
  image       String?   @map("image") @db.VarChar()
  password    String?   @map("password") @db.VarChar()
  role_type   Role_Type @default(user) @map("role_type")

  sms               Sms[]
  // course     Course[]
  user_lesson       user_lesson[]
  enrollment        Enrollment[]
  lesson            Lesson[]
  user_quiz_attempt user_quiz_attempt[]
  users             UserOnRole[]
  userDevice        UserDevice[]

  @@id([id])
  @@map("user")
}

model Sms {
  id            String  @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  smsCode       String? @map("sms_code") @db.VarChar()
  smsExpireTime String? @map("sms_time") @db.VarChar()
  userId        String  @map("user_id") @db.Uuid

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("sms")
}

model UserDevice {
  id           String    @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  app_id       String?   @map("app_id") @db.VarChar()
  name         String    @map("name") @db.VarChar()
  model        String    @map("model") @db.VarChar()
  version      String    @map("version") @db.VarChar()
  ip           String?   @map("ip") @db.VarChar()
  refreshToken String    @map("refresh_token") @db.VarChar()
  accessToken  String    @map("access_token") @db.VarChar()
  userId       String    @map("user_id") @db.Uuid
  createdAt    DateTime  @default(now()) @map("created_at")
  deletedAt    DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("user_device")
}

model Model {
  id   String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name String @map("name") @db.VarChar()

  permission Permission[]

  @@id([id])
  @@map("model")
}

model Permission {
  id       String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name     String @map("name") @db.VarChar()
  code     String @map("code") @db.VarChar()
  model_id String @map("model_id") @db.Uuid()

  model Model @relation(fields: [model_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("permission")
}

model Role {
  id          String       @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name        String       @map("name") @db.VarChar()
  permissions String[]     @map("permissions") @db.Uuid
  role_type   Role_Type    @map("role_type")
  users       UserOnRole[]

  @@id([id])
  @@map("role")
}

model UserOnRole {
  userId     String   @map("user_id") @db.Uuid
  user       User     @relation(fields: [userId], references: [id])
  roleId     String   @map("role_id") @db.Uuid
  role       Role     @relation(fields: [roleId], references: [id])
  assignedAt DateTime @default(now()) @map("assigned_at")
  assignedBy String   @map("assigned_by") @db.Uuid

  @@id([userId, roleId])
}
